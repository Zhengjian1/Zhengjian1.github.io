{"version":3,"sources":["service/api.js","TestFixed.js","serviceWorker.js","index.js"],"names":["getData","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","params","page","result","wrap","_context","prev","next","fetchJsonp","concat","abrupt","stop","this","_x","apply","arguments","dom","TestFixed","content","React","createRef","state","data","getContenData","me","assertThisInitialized","_this","then","response","json","newData","feeds","list","setState","handleScroll","e","scrollTop","clientHeight","documentHeight","scrollHeight","console","log","current","window","addEventListener","react_default","createElement","className","ref","length","map","item","index","key","src","doc_thumbnail","nickname","Component","Boolean","location","hostname","match","ReactDOM","render","src_TestFixed_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qTAEMA,EAAO,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,EAAMC,GAAN,IAAAC,EAAAC,EAAA,OAAAN,EAAAC,EAAAM,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACJL,EAASD,EAATC,KACJC,EAASK,IAAU,iFAAAC,OAAkFP,GAAQ,IAFrGG,EAAAK,OAAA,SAOLP,GAPK,wBAAAE,EAAAM,SAAAX,EAAAY,SAAH,gBAAAC,GAAA,OAAAnB,EAAAoB,MAAAF,KAAAG,YAAA,GCETC,EAAM,KA0EKC,6MAtEbC,QAAUC,IAAMC,cAEhBC,MAAQ,CACNC,KAAM,MAGRC,cAAgB,SAACtB,GACf,IAAIuB,EAAE7B,OAAA8B,EAAA,EAAA9B,QAAA8B,EAAA,EAAA9B,CAAA+B,IAENjC,EAAQQ,GAAQ0B,KAAK,SAASC,GAC5B,OAAOA,EAASC,SACfF,KAAK,SAASE,GAAM,IACbP,EAASE,EAAGH,MAAZC,KACFQ,EAAUD,EAAKP,KAAKS,MAAMC,KAChCR,EAAGS,SAAS,CAAEX,KAAMA,EAAKb,OAAOqB,UAkBpCI,mDAAe,SAAAlC,EAAMmC,GAAN,IAAAC,EAAAC,EAAAC,EAAApC,EAAA,OAAAL,EAAAC,EAAAM,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACP6B,EAAYpB,EAAIoB,UAChBC,EAAerB,EAAIqB,aACnBC,EAAiBtB,EAAIuB,aAC3BC,QAAQC,IACN,aAAczB,EAAIoB,UAClB,gBAAiBpB,EAAIqB,aACrB,kBAAoBrB,EAAIuB,cAEpBrC,EAASwB,EAAKL,MAAdnB,KAEFkC,EAAYC,EAAeC,EAAiB,KAC9CpC,GAAQ,EACRwB,EAAKH,cAAc,CAACrB,UAbT,wBAAAG,EAAAM,SAAAX,EAAAY,kJAbbA,KAAKW,cAAc,CAACrB,KAAM,IAGzBc,EAAMJ,KAAKM,QAAQwB,QAEpBC,OAAOC,iBAAiB,SAAUhC,KAAKsB,+FA0BhC,IACCZ,EAASV,KAAKS,MAAdC,KACR,OACEuB,EAAA/C,EAAAgD,cAAA,OAAKC,UAAU,OACbF,EAAA/C,EAAAgD,cAAA,OAAKC,UAAU,UAAUC,IAAKpC,KAAKM,SAE/BI,EAAK2B,OAAS,GAAK3B,EAAK4B,IAAI,SAACC,EAAMC,GAAP,OAC1BP,EAAA/C,EAAAgD,cAAA,OAAKC,UAAU,OAAOM,IAAKD,GACvBP,EAAA/C,EAAAgD,cAAA,OAAKQ,IAAKH,EAAK7B,KAAKiC,gBACpBV,EAAA/C,EAAAgD,cAAA,QAAMC,UAAU,SAASI,EAAKK,cAKxCX,EAAA/C,EAAAgD,cAAA,OAAKC,UAAU,UAAf,kBAlEgBU,aCMJC,QACW,cAA7Bf,OAAOgB,SAASC,UAEe,UAA7BjB,OAAOgB,SAASC,UAEhBjB,OAAOgB,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOlB,EAAA/C,EAAAgD,cAACkB,EAAD,MAAeC,SAASC,eAAe,SDyHjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,KAAK,SAAA2C,GACjCA,EAAaC","file":"static/js/main.8ca353de.chunk.js","sourcesContent":["import fetchJsonp from 'fetch-jsonp/build/fetch-jsonp';\n\nconst getData = async(params) => {\n    const { page } = params;\n    var result = fetchJsonp(`https://c1.m.ifeng.com/api_wemedia_index?tag=home&cid=838783&pagesize=10&page=${page}`, {\n    //   jsonpCallback: 'showData',\n    //   timeout: 3000\n    })\n\n    return result;\n};\n\nexport {\n    getData \n};","import React, { Component } from 'react';\nimport './TestFixed.css';\nimport { getData } from './service/api';\n\nlet dom = null;\n\nclass TestFixed extends Component {\n\n  content = React.createRef()\n\n  state = {\n    data: []\n  }\n\n  getContenData = (params) => {\n    let me = this;\n\n    getData(params).then(function(response) {\n      return response.json()\n    }).then(function(json) {\n      const { data } = me.state;\n      const newData = json.data.feeds.list;\n      me.setState({ data: data.concat(newData) });\n    });\n  }\n\n  componentDidMount(){\n    this.getContenData({page: 1});\n\n    // dom = ReactDOM.findDOMNode(this);\n     dom = this.content.current;\n    // console.log(dom)\n    window.addEventListener('scroll', this.handleScroll)\n    // dom.style.background='red'\n  }\n\n  componentWillUnmount(){\n    \n  }\n\n  handleScroll = async(e) => {\n    const scrollTop = dom.scrollTop;\n    const clientHeight = dom.clientHeight;\n    const documentHeight = dom.scrollHeight;\n    console.log(\n      'scrolltop:'+ dom.scrollTop,\n      'clientHeight:'+ dom.clientHeight,\n      'documentHeight:' + dom.scrollHeight\n    )\n    let { page } = this.state;\n\n    if (scrollTop + clientHeight > documentHeight - 50){\n      page += 1;\n      this.getContenData({page});\n    }\n\n  }\n\n  render() {\n    const { data } = this.state;\n    return (\n      <div className=\"App\"  >\n        <div className='content' ref={this.content} >\n          {\n            data.length > 0 && data.map((item, index) => (\n              <div className='item' key={index}>\n                  <img src={item.data.doc_thumbnail} />\n                  <span className='title'>{item.nickname}</span> \n              </div>  \n            ))\n          } \n        </div>\n        <div className='footer'>footer</div>\n      </div>\n    );\n  }\n}\n\nexport default TestFixed;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\n// import TestFlex from './TestFlex';\nimport TestFixed from './TestFixed';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<TestFixed />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}